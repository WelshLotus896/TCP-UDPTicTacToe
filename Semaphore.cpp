#include "stdafx.h"
#include "Semaphore.h"


Semaphore::Semaphore()
{
}


Semaphore::~Semaphore()
{
}

DWORD Semaphore::ThreadProc(LPVOID lpParameter)
{
////////////////////////////////////////////////////////////////////////////////////////////////////
//open the semaphore to be used
////////////////////////////////////////////////////////////////////////////////////////////////////
	semaphorehdl = OpenSemaphore(SYNCHRONIZE | SEMAPHORE_MODIFY_STATE, FALSE, semaphorename);
	printf("Thread %c\r\n", key);
	TicTacToe myGame;
////////////////////////////////////////////////////////////////////////////////////////////////////
//Wait forever
////////////////////////////////////////////////////////////////////////////////////////////////////
	while (1)
	{
////////////////////////////////////////////////////////////////////////////////////////////////////
//wait for a key to be pressed
////////////////////////////////////////////////////////////////////////////////////////////////////
		WaitForSingleObject(semaphorehdl, INFINITE);
////////////////////////////////////////////////////////////////////////////////////////////////////
//initiate the gameloop
////////////////////////////////////////////////////////////////////////////////////////////////////
		myGame.GameLoop();




		if (terminate_app1)
		{
			break;
		}


		Sleep(0);


	}
////////////////////////////////////////////////////////////////////////////////////////////////////
//Clean up and release the semaphore and close the handle
////////////////////////////////////////////////////////////////////////////////////////////////////
	ReleaseSemaphore(semaphorehdl, 1, &semaphoreCount);
	CloseHandle(semaphorehdl);
	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
//Create the semaphore
////////////////////////////////////////////////////////////////////////////////////////////////////
int Semaphore::Semaphoremain()
{
////////////////////////////////////////////////////////////////////////////////////////////////////
//Create the semaphore
////////////////////////////////////////////////////////////////////////////////////////////////////
	semaphorehdl = CreateSemaphore(NULL, 1, 1, semaphorename);
////////////////////////////////////////////////////////////////////////////////////////////////////
//Create the thread that will perform
////////////////////////////////////////////////////////////////////////////////////////////////////
	Threadhdl = CreateThread(NULL, 0, ThreadProc, (LPVOID)0, 0, NULL);
////////////////////////////////////////////////////////////////////////////////////////////////////
//Loop 12 times for the game to continue
////////////////////////////////////////////////////////////////////////////////////////////////////
	for(int i = 0; i < 12; i++)
	{
////////////////////////////////////////////////////////////////////////////////////////////////////
//wait for a key to be entered
////////////////////////////////////////////////////////////////////////////////////////////////////
		WaitForSingleObject(semaphorehdl, INFINITE);
////////////////////////////////////////////////////////////////////////////////////////////////////
//get the key entered in a form of a character
////////////////////////////////////////////////////////////////////////////////////////////////////
		key = getch();
////////////////////////////////////////////////////////////////////////////////////////////////////
//Release the Semaphore
////////////////////////////////////////////////////////////////////////////////////////////////////
		ReleaseSemaphore(semaphorehdl, 1, &semaphoreCount);
	}

	terminate_app1 = 1;

	WaitForSingleObject(Threadhdl, INFINITE);
////////////////////////////////////////////////////////////////////////////////////////////////////
//Close the handle to cleanup
////////////////////////////////////////////////////////////////////////////////////////////////////
	CloseHandle(Threadhdl);

	printf("Exit..");
	getchar();
	return 0;
}