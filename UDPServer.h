#pragma once
#include "stdafx.h"
#include "TicTacToe.h"
#define DEFAULT_PORT "27015"
#define DEFAULT_BUFLEN 512

class UDPServer
{
private:
	WSADATA	wsaData;
	char	recvbuf[DEFAULT_BUFLEN];
	int		iResult;
	int		recvbuflen = DEFAULT_BUFLEN;
	int iRcvdBytes = 0;
	sockaddr_in rx_addr;
	sockaddr_in sender_addr;
	int iSenderAddrSize = sizeof(sender_addr);
	struct addrinfo *addressList = NULL;
	struct addrinfo *ptr = NULL;
	struct addrinfo hints;
	SOCKET myUDPServer = INVALID_SOCKET;
	TicTacToe myGame;
	int x;
	int y;

	WSADATA	wsaData2;
	char	recvbuf2[DEFAULT_BUFLEN];
	int		iResult2;
	int		recvbuflen2 = DEFAULT_BUFLEN;

	struct addrinfo *addressList2 = NULL;
	struct addrinfo *ptr2 = NULL;
	struct addrinfo hints2;
	SOCKET myUDPServer2 = INVALID_SOCKET;
	
	int iRcvdBytes2 = 0;
	sockaddr_in rx_addr2;
	sockaddr_in sender_addr2;
	int iSenderAddrSize2 = sizeof(sender_addr2);
	char recvbuf3[1000];
	SOCKET myUDPServer3 = INVALID_SOCKET;




////////////////////////////////////////////////////////////////////////////////////////////////////
//Create the data structure for the message 
////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef struct
	{
		unsigned short code;
		unsigned short length;
		unsigned char username[20];
		unsigned long longValue;
		unsigned short shortvalue;
		unsigned char byteValue;
		int PlayerPositionX;
		int PlayerPositionY;
		int playerTurn;
		unsigned short datalen;
		unsigned char data[100];

	}MSG_STRUCT;
	unsigned short buflen;
////////////////////////////////////////////////////////////////////////////////////////////////////
//Create the macros required for packing the message
////////////////////////////////////////////////////////////////////////////////////////////////////
#define PackBytes(bf, bytes, len) \
    memcpy(bf, bytes, len); \
    bf += len;

#define PackLong(bf, l) \
    *bf++ = (l >> 24) & 0xFF; \
    *bf++ = (l >> 16) & 0xFF; \
    *bf++ = (l >> 8) & 0xFF; \
    *bf++ = l & 0xFF;    

#define PackShort(bf, s) \
    *bf++ = (s >> 8) & 0xFF; \
    *bf++ = s & 0xFF;    

#define PackByte(bf, b) \
    *bf++ = b;    

////////////////////////////////////////////////////////////////////////////////////////////////////
//Create the macros for unpacking the messages contents
////////////////////////////////////////////////////////////////////////////////////////////////////

#define UnpackBytes(bf, bytes, len) \
    memcpy(bytes, bf, len); \
    bf += len;

#define UnpackLong(bf, l) \
    l = (*bf++ << 24); \
    l += (*bf++ << 16); \
    l += (*bf++ << 8); \
    l += *bf++;

#define UnpackShort(bf, s) \
    s = (*bf++ << 8); \
    s += *bf++;

#define UnpackByte(bf, b) \
    b = *bf++;

public:
	UDPServer();
	~UDPServer();
////////////////////////////////////////////////////////////////////////////////////////////////////
//Create the sockets for Player 1
////////////////////////////////////////////////////////////////////////////////////////////////////
	int createSocket1(void);
////////////////////////////////////////////////////////////////////////////////////////////////////
//Create the sockets for Player 2
////////////////////////////////////////////////////////////////////////////////////////////////////
	int createSocket2(void);
////////////////////////////////////////////////////////////////////////////////////////////////////
//Create the socket connection for Player 1
////////////////////////////////////////////////////////////////////////////////////////////////////
	int client1Connection(void);
////////////////////////////////////////////////////////////////////////////////////////////////////
//Create the sockets for Player 2
////////////////////////////////////////////////////////////////////////////////////////////////////
	int client2Connection(void);
////////////////////////////////////////////////////////////////////////////////////////////////////
//Recieve Board Update during game time
////////////////////////////////////////////////////////////////////////////////////////////////////
	void ReceiveBoardUpdate();
//	void RecieveUpdate();
//	void RecieveUpdate2();
////////////////////////////////////////////////////////////////////////////////////////////////////
//Create a method that will pack the contents of the message before sending to the user
////////////////////////////////////////////////////////////////////////////////////////////////////
	unsigned short PackMsg(MSG_STRUCT *msg, unsigned char *buff);
////////////////////////////////////////////////////////////////////////////////////////////////////
//Create a method that will pack the contents of the message before sending to the user
////////////////////////////////////////////////////////////////////////////////////////////////////
	void UnpackMSG(MSG_STRUCT *msg, unsigned char *buff);

};

